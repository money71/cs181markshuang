# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _game_interface
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _game_interface.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _game_interface.PySwigIterator_value(*args)
    def incr(*args): return _game_interface.PySwigIterator_incr(*args)
    def decr(*args): return _game_interface.PySwigIterator_decr(*args)
    def distance(*args): return _game_interface.PySwigIterator_distance(*args)
    def equal(*args): return _game_interface.PySwigIterator_equal(*args)
    def copy(*args): return _game_interface.PySwigIterator_copy(*args)
    def next(*args): return _game_interface.PySwigIterator_next(*args)
    def previous(*args): return _game_interface.PySwigIterator_previous(*args)
    def advance(*args): return _game_interface.PySwigIterator_advance(*args)
    def __eq__(*args): return _game_interface.PySwigIterator___eq__(*args)
    def __ne__(*args): return _game_interface.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _game_interface.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _game_interface.PySwigIterator___isub__(*args)
    def __add__(*args): return _game_interface.PySwigIterator___add__(*args)
    def __sub__(*args): return _game_interface.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _game_interface.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class Vector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Vector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Vector, name)
    __repr__ = _swig_repr
    def iterator(*args): return _game_interface.Vector_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _game_interface.Vector___nonzero__(*args)
    def __len__(*args): return _game_interface.Vector___len__(*args)
    def pop(*args): return _game_interface.Vector_pop(*args)
    def __getslice__(*args): return _game_interface.Vector___getslice__(*args)
    def __setslice__(*args): return _game_interface.Vector___setslice__(*args)
    def __delslice__(*args): return _game_interface.Vector___delslice__(*args)
    def __delitem__(*args): return _game_interface.Vector___delitem__(*args)
    def __getitem__(*args): return _game_interface.Vector___getitem__(*args)
    def __setitem__(*args): return _game_interface.Vector___setitem__(*args)
    def append(*args): return _game_interface.Vector_append(*args)
    def empty(*args): return _game_interface.Vector_empty(*args)
    def size(*args): return _game_interface.Vector_size(*args)
    def clear(*args): return _game_interface.Vector_clear(*args)
    def swap(*args): return _game_interface.Vector_swap(*args)
    def get_allocator(*args): return _game_interface.Vector_get_allocator(*args)
    def begin(*args): return _game_interface.Vector_begin(*args)
    def end(*args): return _game_interface.Vector_end(*args)
    def rbegin(*args): return _game_interface.Vector_rbegin(*args)
    def rend(*args): return _game_interface.Vector_rend(*args)
    def pop_back(*args): return _game_interface.Vector_pop_back(*args)
    def erase(*args): return _game_interface.Vector_erase(*args)
    def __init__(self, *args): 
        this = _game_interface.new_Vector(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _game_interface.Vector_push_back(*args)
    def front(*args): return _game_interface.Vector_front(*args)
    def back(*args): return _game_interface.Vector_back(*args)
    def assign(*args): return _game_interface.Vector_assign(*args)
    def resize(*args): return _game_interface.Vector_resize(*args)
    def insert(*args): return _game_interface.Vector_insert(*args)
    def reserve(*args): return _game_interface.Vector_reserve(*args)
    def capacity(*args): return _game_interface.Vector_capacity(*args)
    __swig_destroy__ = _game_interface.delete_Vector
    __del__ = lambda self : None;
Vector_swigregister = _game_interface.Vector_swigregister
Vector_swigregister(Vector)

UP = _game_interface.UP
LEFT = _game_interface.LEFT
DOWN = _game_interface.DOWN
RIGHT = _game_interface.RIGHT
STATUS_UNKNOWN_PLANT = _game_interface.STATUS_UNKNOWN_PLANT
STATUS_NO_PLANT = _game_interface.STATUS_NO_PLANT
STATUS_NUTRITIOUS_PLANT = _game_interface.STATUS_NUTRITIOUS_PLANT
STATUS_POISONOUS_PLANT = _game_interface.STATUS_POISONOUS_PLANT
class GameInterface(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, GameInterface, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, GameInterface, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _game_interface.new_GameInterface(*args)
        try: self.this.append(this)
        except: self.this = this
    def StartGame(*args): return _game_interface.GameInterface_StartGame(*args)
    def ExecuteMoves(*args): return _game_interface.GameInterface_ExecuteMoves(*args)
    def GetPlayer1View(*args): return _game_interface.GameInterface_GetPlayer1View(*args)
    def GetPlayer2View(*args): return _game_interface.GameInterface_GetPlayer2View(*args)
    __swig_destroy__ = _game_interface.delete_GameInterface
    __del__ = lambda self : None;
GameInterface_swigregister = _game_interface.GameInterface_swigregister
GameInterface_swigregister(GameInterface)

class PlayerView(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PlayerView, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PlayerView, name)
    __repr__ = _swig_repr
    def GetLife(*args): return _game_interface.PlayerView_GetLife(*args)
    def GetXPos(*args): return _game_interface.PlayerView_GetXPos(*args)
    def GetYPos(*args): return _game_interface.PlayerView_GetYPos(*args)
    def GetRound(*args): return _game_interface.PlayerView_GetRound(*args)
    def GetImage(*args): return _game_interface.PlayerView_GetImage(*args)
    def GetPlantInfo(*args): return _game_interface.PlayerView_GetPlantInfo(*args)
    def __init__(self, *args): 
        this = _game_interface.new_PlayerView(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _game_interface.delete_PlayerView
    __del__ = lambda self : None;
PlayerView_swigregister = _game_interface.PlayerView_swigregister
PlayerView_swigregister(PlayerView)

curses_init = _game_interface.curses_init
curses_close = _game_interface.curses_close
curses_draw_board = _game_interface.curses_draw_board
curses_center_cursor = _game_interface.curses_center_cursor
curses_init_round = _game_interface.curses_init_round
curses_declare_winner = _game_interface.curses_declare_winner
curses_debug = _game_interface.curses_debug


